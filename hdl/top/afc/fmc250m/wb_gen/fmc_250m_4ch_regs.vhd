---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Control and status registers for FMC 250M 4CH
---------------------------------------------------------------------------------------
-- File           : fmc_250m_4ch_regs.vhd
-- Author         : auto-generated by wbgen2 from fmc_250m_4ch_regs.wb
-- Created        : Sun Apr 14 20:37:34 2013
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE fmc_250m_4ch_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity wb_fmc_250m_4ch_csr is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(3 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- Port for std_logic_vector field: 'PRSNT' in reg: 'FMC Status'
    wb_fmc_250m_4ch_csr_fmc_status_prsnt_i   : in     std_logic;
-- Port for std_logic_vector field: 'PG_M2C' in reg: 'FMC Status'
    wb_fmc_250m_4ch_csr_fmc_status_pg_m2c_i  : in     std_logic;
-- Port for std_logic_vector field: 'CLK_DIR' in reg: 'FMC Status'
    wb_fmc_250m_4ch_csr_fmc_status_clk_dir_i : in     std_logic;
-- Port for std_logic_vector field: 'FIRMWARE ID' in reg: 'FMC Status'
    wb_fmc_250m_4ch_csr_fmc_status_firmware_id_i : in     std_logic_vector(28 downto 0);
-- Port for std_logic_vector field: 'DIR' in reg: 'Trigger control'
    wb_fmc_250m_4ch_csr_trigger_dir_o        : out    std_logic;
-- Port for std_logic_vector field: 'TERM' in reg: 'Trigger control'
    wb_fmc_250m_4ch_csr_trigger_term_o       : out    std_logic;
-- Port for std_logic_vector field: 'TRIG_VAL' in reg: 'Trigger control'
    wb_fmc_250m_4ch_csr_trigger_trig_val_o   : out    std_logic;
-- Port for std_logic_vector field: 'Reserved' in reg: 'Trigger control'
    wb_fmc_250m_4ch_csr_trigger_reserved_i   : in     std_logic_vector(28 downto 0);
-- Port for std_logic_vector field: 'CLKDIVRST' in reg: 'ADC ISLA216P25 control register (4 chips)'
    wb_fmc_250m_4ch_csr_adc_clkdivrst_o      : out    std_logic;
-- Port for std_logic_vector field: 'RESETn' in reg: 'ADC ISLA216P25 control register (4 chips)'
    wb_fmc_250m_4ch_csr_adc_resetn_o         : out    std_logic;
-- Port for std_logic_vector field: 'SLEEP' in reg: 'ADC ISLA216P25 control register (4 chips)'
    wb_fmc_250m_4ch_csr_adc_sleep_o          : out    std_logic_vector(1 downto 0);
-- Port for std_logic_vector field: 'Reserved' in reg: 'ADC ISLA216P25 control register (4 chips)'
    wb_fmc_250m_4ch_csr_adc_reserved_i       : in     std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'SI571_OE' in reg: 'Clock distribution control register'
    wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_o : out    std_logic;
-- Port for std_logic_vector field: 'PLL_FUNCTION' in reg: 'Clock distribution control register'
    wb_fmc_250m_4ch_csr_clk_distrib_pll_function_o : out    std_logic;
-- Port for std_logic_vector field: 'PLL_STATUS' in reg: 'Clock distribution control register'
    wb_fmc_250m_4ch_csr_clk_distrib_pll_status_i : in     std_logic;
-- Port for std_logic_vector field: 'CLK_SEL' in reg: 'Clock distribution control register'
    wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_o : out    std_logic;
-- Port for std_logic_vector field: 'Reserved' in reg: 'Clock distribution control register'
    wb_fmc_250m_4ch_csr_clk_distrib_reserved_i : in     std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'MON_DEV' in reg: 'Monitor and FMC status control register'
    wb_fmc_250m_4ch_csr_monitor_mon_dev_i    : in     std_logic;
-- Port for std_logic_vector field: 'LED1' in reg: 'Monitor and FMC status control register'
    wb_fmc_250m_4ch_csr_monitor_led1_o       : out    std_logic;
-- Port for std_logic_vector field: 'LED2' in reg: 'Monitor and FMC status control register'
    wb_fmc_250m_4ch_csr_monitor_led2_o       : out    std_logic;
-- Port for std_logic_vector field: 'LED3' in reg: 'Monitor and FMC status control register'
    wb_fmc_250m_4ch_csr_monitor_led3_o       : out    std_logic;
-- Port for std_logic_vector field: 'Reserved' in reg: 'Monitor and FMC status control register'
    wb_fmc_250m_4ch_csr_monitor_reserved_i   : in     std_logic_vector(27 downto 0);
-- Port for std_logic_vector field: 'FMC_IDELAY_RST' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_o : out    std_logic;
-- Port for std_logic_vector field: 'FMC_FIFO_RST' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_o : out    std_logic;
-- Port for std_logic_vector field: 'FMC_IDELAY0_RDY' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay0_rdy_i : in     std_logic;
-- Port for std_logic_vector field: 'FMC_IDELAY1_RDY' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay1_rdy_i : in     std_logic;
-- Port for std_logic_vector field: 'FMC_IDELAY2_RDY' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay2_rdy_i : in     std_logic;
-- Port for std_logic_vector field: 'FMC_IDELAY3_RDY' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay3_rdy_i : in     std_logic;
-- Port for std_logic_vector field: 'Reserved' in reg: 'FPGA control'
    wb_fmc_250m_4ch_csr_fpga_ctrl_reserved_i : in     std_logic_vector(25 downto 0);
-- Port for std_logic_vector field: 'UPDATE' in reg: 'IDELAY ADC0 calibration'
    wb_fmc_250m_4ch_csr_idelay0_cal_update_o : out    std_logic;
-- Port for std_logic_vector field: 'LINE' in reg: 'IDELAY ADC0 calibration'
    wb_fmc_250m_4ch_csr_idelay0_cal_line_o   : out    std_logic_vector(16 downto 0);
-- Port for std_logic_vector field: 'VAL' in reg: 'IDELAY ADC0 calibration'
    wb_fmc_250m_4ch_csr_idelay0_cal_val_o    : out    std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'VAL_READ' in reg: 'IDELAY ADC0 calibration'
    wb_fmc_250m_4ch_csr_idelay0_cal_val_read_i : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Reserved' in reg: 'IDELAY ADC0 calibration'
    wb_fmc_250m_4ch_csr_idelay0_cal_reserved_i : in     std_logic_vector(3 downto 0);
-- Port for std_logic_vector field: 'UPDATE' in reg: 'IDELAY ADC1 calibration'
    wb_fmc_250m_4ch_csr_idelay1_cal_update_o : out    std_logic;
-- Port for std_logic_vector field: 'LINE' in reg: 'IDELAY ADC1 calibration'
    wb_fmc_250m_4ch_csr_idelay1_cal_line_o   : out    std_logic_vector(16 downto 0);
-- Port for std_logic_vector field: 'VAL' in reg: 'IDELAY ADC1 calibration'
    wb_fmc_250m_4ch_csr_idelay1_cal_val_o    : out    std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'VAL_READ' in reg: 'IDELAY ADC1 calibration'
    wb_fmc_250m_4ch_csr_idelay1_cal_val_read_i : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Reserved' in reg: 'IDELAY ADC1 calibration'
    wb_fmc_250m_4ch_csr_idelay1_cal_reserved_i : in     std_logic_vector(3 downto 0);
-- Port for std_logic_vector field: 'UPDATE' in reg: 'IDELAY ADC2 calibration'
    wb_fmc_250m_4ch_csr_idelay2_cal_update_o : out    std_logic;
-- Port for std_logic_vector field: 'LINE' in reg: 'IDELAY ADC2 calibration'
    wb_fmc_250m_4ch_csr_idelay2_cal_line_o   : out    std_logic_vector(16 downto 0);
-- Port for std_logic_vector field: 'VAL' in reg: 'IDELAY ADC2 calibration'
    wb_fmc_250m_4ch_csr_idelay2_cal_val_o    : out    std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'VAL_READ' in reg: 'IDELAY ADC2 calibration'
    wb_fmc_250m_4ch_csr_idelay2_cal_val_read_i : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Reserved' in reg: 'IDELAY ADC2 calibration'
    wb_fmc_250m_4ch_csr_idelay2_cal_reserved_i : in     std_logic_vector(3 downto 0);
-- Port for std_logic_vector field: 'UPDATE' in reg: 'IDELAY ADC3 calibration'
    wb_fmc_250m_4ch_csr_idelay3_cal_update_o : out    std_logic;
-- Port for std_logic_vector field: 'LINE' in reg: 'IDELAY ADC3 calibration'
    wb_fmc_250m_4ch_csr_idelay3_cal_line_o   : out    std_logic_vector(16 downto 0);
-- Port for std_logic_vector field: 'VAL' in reg: 'IDELAY ADC3 calibration'
    wb_fmc_250m_4ch_csr_idelay3_cal_val_o    : out    std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'VAL_READ' in reg: 'IDELAY ADC3 calibration'
    wb_fmc_250m_4ch_csr_idelay3_cal_val_read_i : in     std_logic_vector(4 downto 0);
-- Port for std_logic_vector field: 'Reserved' in reg: 'IDELAY ADC3 calibration'
    wb_fmc_250m_4ch_csr_idelay3_cal_reserved_i : in     std_logic_vector(3 downto 0);
-- Port for std_logic_vector field: 'DATA0' in reg: 'data0'
    wb_fmc_250m_4ch_csr_data0_val_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'DATA1' in reg: 'data1'
    wb_fmc_250m_4ch_csr_data1_val_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'DATA2' in reg: 'data2'
    wb_fmc_250m_4ch_csr_data2_val_i          : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'DATA3' in reg: 'data3'
    wb_fmc_250m_4ch_csr_data3_val_i          : in     std_logic_vector(31 downto 0)
  );
end wb_fmc_250m_4ch_csr;

architecture syn of wb_fmc_250m_4ch_csr is

signal wb_fmc_250m_4ch_csr_trigger_dir_int      : std_logic;
signal wb_fmc_250m_4ch_csr_trigger_term_int     : std_logic;
signal wb_fmc_250m_4ch_csr_trigger_trig_val_int : std_logic;
signal wb_fmc_250m_4ch_csr_adc_clkdivrst_int    : std_logic;
signal wb_fmc_250m_4ch_csr_adc_resetn_int       : std_logic;
signal wb_fmc_250m_4ch_csr_adc_sleep_int        : std_logic_vector(1 downto 0);
signal wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_int : std_logic;
signal wb_fmc_250m_4ch_csr_clk_distrib_pll_function_int : std_logic;
signal wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_int : std_logic;
signal wb_fmc_250m_4ch_csr_monitor_led1_int     : std_logic;
signal wb_fmc_250m_4ch_csr_monitor_led2_int     : std_logic;
signal wb_fmc_250m_4ch_csr_monitor_led3_int     : std_logic;
signal wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_int : std_logic;
signal wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_int : std_logic;
signal wb_fmc_250m_4ch_csr_idelay0_cal_update_int : std_logic;
signal wb_fmc_250m_4ch_csr_idelay0_cal_line_int : std_logic_vector(16 downto 0);
signal wb_fmc_250m_4ch_csr_idelay0_cal_val_int  : std_logic_vector(4 downto 0);
signal wb_fmc_250m_4ch_csr_idelay1_cal_update_int : std_logic;
signal wb_fmc_250m_4ch_csr_idelay1_cal_line_int : std_logic_vector(16 downto 0);
signal wb_fmc_250m_4ch_csr_idelay1_cal_val_int  : std_logic_vector(4 downto 0);
signal wb_fmc_250m_4ch_csr_idelay2_cal_update_int : std_logic;
signal wb_fmc_250m_4ch_csr_idelay2_cal_line_int : std_logic_vector(16 downto 0);
signal wb_fmc_250m_4ch_csr_idelay2_cal_val_int  : std_logic_vector(4 downto 0);
signal wb_fmc_250m_4ch_csr_idelay3_cal_update_int : std_logic;
signal wb_fmc_250m_4ch_csr_idelay3_cal_line_int : std_logic_vector(16 downto 0);
signal wb_fmc_250m_4ch_csr_idelay3_cal_val_int  : std_logic_vector(4 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      wb_fmc_250m_4ch_csr_trigger_dir_int <= '0';
      wb_fmc_250m_4ch_csr_trigger_term_int <= '0';
      wb_fmc_250m_4ch_csr_trigger_trig_val_int <= '0';
      wb_fmc_250m_4ch_csr_adc_clkdivrst_int <= '0';
      wb_fmc_250m_4ch_csr_adc_resetn_int <= '0';
      wb_fmc_250m_4ch_csr_adc_sleep_int <= "00";
      wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_int <= '0';
      wb_fmc_250m_4ch_csr_clk_distrib_pll_function_int <= '0';
      wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_int <= '0';
      wb_fmc_250m_4ch_csr_monitor_led1_int <= '0';
      wb_fmc_250m_4ch_csr_monitor_led2_int <= '0';
      wb_fmc_250m_4ch_csr_monitor_led3_int <= '0';
      wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_int <= '0';
      wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_int <= '0';
      wb_fmc_250m_4ch_csr_idelay0_cal_update_int <= '0';
      wb_fmc_250m_4ch_csr_idelay0_cal_line_int <= "00000000000000000";
      wb_fmc_250m_4ch_csr_idelay0_cal_val_int <= "00000";
      wb_fmc_250m_4ch_csr_idelay1_cal_update_int <= '0';
      wb_fmc_250m_4ch_csr_idelay1_cal_line_int <= "00000000000000000";
      wb_fmc_250m_4ch_csr_idelay1_cal_val_int <= "00000";
      wb_fmc_250m_4ch_csr_idelay2_cal_update_int <= '0';
      wb_fmc_250m_4ch_csr_idelay2_cal_line_int <= "00000000000000000";
      wb_fmc_250m_4ch_csr_idelay2_cal_val_int <= "00000";
      wb_fmc_250m_4ch_csr_idelay3_cal_update_int <= '0';
      wb_fmc_250m_4ch_csr_idelay3_cal_line_int <= "00000000000000000";
      wb_fmc_250m_4ch_csr_idelay3_cal_val_int <= "00000";
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_fmc_status_prsnt_i;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_fmc_status_pg_m2c_i;
              rddata_reg(2) <= wb_fmc_250m_4ch_csr_fmc_status_clk_dir_i;
              rddata_reg(31 downto 3) <= wb_fmc_250m_4ch_csr_fmc_status_firmware_id_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_trigger_dir_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_trigger_term_int <= wrdata_reg(1);
              wb_fmc_250m_4ch_csr_trigger_trig_val_int <= wrdata_reg(2);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_trigger_dir_int;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_trigger_term_int;
              rddata_reg(2) <= wb_fmc_250m_4ch_csr_trigger_trig_val_int;
              rddata_reg(31 downto 3) <= wb_fmc_250m_4ch_csr_trigger_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_adc_clkdivrst_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_adc_resetn_int <= wrdata_reg(1);
              wb_fmc_250m_4ch_csr_adc_sleep_int <= wrdata_reg(3 downto 2);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_adc_clkdivrst_int;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_adc_resetn_int;
              rddata_reg(3 downto 2) <= wb_fmc_250m_4ch_csr_adc_sleep_int;
              rddata_reg(31 downto 4) <= wb_fmc_250m_4ch_csr_adc_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_clk_distrib_pll_function_int <= wrdata_reg(1);
              wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_int <= wrdata_reg(3);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_int;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_clk_distrib_pll_function_int;
              rddata_reg(2) <= wb_fmc_250m_4ch_csr_clk_distrib_pll_status_i;
              rddata_reg(3) <= wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_int;
              rddata_reg(31 downto 4) <= wb_fmc_250m_4ch_csr_clk_distrib_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_monitor_led1_int <= wrdata_reg(1);
              wb_fmc_250m_4ch_csr_monitor_led2_int <= wrdata_reg(2);
              wb_fmc_250m_4ch_csr_monitor_led3_int <= wrdata_reg(3);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_monitor_mon_dev_i;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_monitor_led1_int;
              rddata_reg(2) <= wb_fmc_250m_4ch_csr_monitor_led2_int;
              rddata_reg(3) <= wb_fmc_250m_4ch_csr_monitor_led3_int;
              rddata_reg(31 downto 4) <= wb_fmc_250m_4ch_csr_monitor_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_int <= wrdata_reg(1);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_int;
              rddata_reg(1) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_int;
              rddata_reg(2) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay0_rdy_i;
              rddata_reg(3) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay1_rdy_i;
              rddata_reg(4) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay2_rdy_i;
              rddata_reg(5) <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay3_rdy_i;
              rddata_reg(31 downto 6) <= wb_fmc_250m_4ch_csr_fpga_ctrl_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_idelay0_cal_update_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_idelay0_cal_line_int <= wrdata_reg(17 downto 1);
              wb_fmc_250m_4ch_csr_idelay0_cal_val_int <= wrdata_reg(22 downto 18);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_idelay0_cal_update_int;
              rddata_reg(17 downto 1) <= wb_fmc_250m_4ch_csr_idelay0_cal_line_int;
              rddata_reg(22 downto 18) <= wb_fmc_250m_4ch_csr_idelay0_cal_val_int;
              rddata_reg(27 downto 23) <= wb_fmc_250m_4ch_csr_idelay0_cal_val_read_i;
              rddata_reg(31 downto 28) <= wb_fmc_250m_4ch_csr_idelay0_cal_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_idelay1_cal_update_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_idelay1_cal_line_int <= wrdata_reg(17 downto 1);
              wb_fmc_250m_4ch_csr_idelay1_cal_val_int <= wrdata_reg(22 downto 18);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_idelay1_cal_update_int;
              rddata_reg(17 downto 1) <= wb_fmc_250m_4ch_csr_idelay1_cal_line_int;
              rddata_reg(22 downto 18) <= wb_fmc_250m_4ch_csr_idelay1_cal_val_int;
              rddata_reg(27 downto 23) <= wb_fmc_250m_4ch_csr_idelay1_cal_val_read_i;
              rddata_reg(31 downto 28) <= wb_fmc_250m_4ch_csr_idelay1_cal_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1000" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_idelay2_cal_update_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_idelay2_cal_line_int <= wrdata_reg(17 downto 1);
              wb_fmc_250m_4ch_csr_idelay2_cal_val_int <= wrdata_reg(22 downto 18);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_idelay2_cal_update_int;
              rddata_reg(17 downto 1) <= wb_fmc_250m_4ch_csr_idelay2_cal_line_int;
              rddata_reg(22 downto 18) <= wb_fmc_250m_4ch_csr_idelay2_cal_val_int;
              rddata_reg(27 downto 23) <= wb_fmc_250m_4ch_csr_idelay2_cal_val_read_i;
              rddata_reg(31 downto 28) <= wb_fmc_250m_4ch_csr_idelay2_cal_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1001" => 
            if (wb_we_i = '1') then
              wb_fmc_250m_4ch_csr_idelay3_cal_update_int <= wrdata_reg(0);
              wb_fmc_250m_4ch_csr_idelay3_cal_line_int <= wrdata_reg(17 downto 1);
              wb_fmc_250m_4ch_csr_idelay3_cal_val_int <= wrdata_reg(22 downto 18);
            else
              rddata_reg(0) <= wb_fmc_250m_4ch_csr_idelay3_cal_update_int;
              rddata_reg(17 downto 1) <= wb_fmc_250m_4ch_csr_idelay3_cal_line_int;
              rddata_reg(22 downto 18) <= wb_fmc_250m_4ch_csr_idelay3_cal_val_int;
              rddata_reg(27 downto 23) <= wb_fmc_250m_4ch_csr_idelay3_cal_val_read_i;
              rddata_reg(31 downto 28) <= wb_fmc_250m_4ch_csr_idelay3_cal_reserved_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= wb_fmc_250m_4ch_csr_data0_val_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= wb_fmc_250m_4ch_csr_data1_val_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= wb_fmc_250m_4ch_csr_data2_val_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "1101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= wb_fmc_250m_4ch_csr_data3_val_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- PRSNT
-- PG_M2C
-- CLK_DIR
-- FIRMWARE ID
-- DIR
  wb_fmc_250m_4ch_csr_trigger_dir_o <= wb_fmc_250m_4ch_csr_trigger_dir_int;
-- TERM
  wb_fmc_250m_4ch_csr_trigger_term_o <= wb_fmc_250m_4ch_csr_trigger_term_int;
-- TRIG_VAL
  wb_fmc_250m_4ch_csr_trigger_trig_val_o <= wb_fmc_250m_4ch_csr_trigger_trig_val_int;
-- Reserved
-- CLKDIVRST
  wb_fmc_250m_4ch_csr_adc_clkdivrst_o <= wb_fmc_250m_4ch_csr_adc_clkdivrst_int;
-- RESETn
  wb_fmc_250m_4ch_csr_adc_resetn_o <= wb_fmc_250m_4ch_csr_adc_resetn_int;
-- SLEEP
  wb_fmc_250m_4ch_csr_adc_sleep_o <= wb_fmc_250m_4ch_csr_adc_sleep_int;
-- Reserved
-- SI571_OE
  wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_o <= wb_fmc_250m_4ch_csr_clk_distrib_si571_oe_int;
-- PLL_FUNCTION
  wb_fmc_250m_4ch_csr_clk_distrib_pll_function_o <= wb_fmc_250m_4ch_csr_clk_distrib_pll_function_int;
-- PLL_STATUS
-- CLK_SEL
  wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_o <= wb_fmc_250m_4ch_csr_clk_distrib_clk_sel_int;
-- Reserved
-- MON_DEV
-- LED1
  wb_fmc_250m_4ch_csr_monitor_led1_o <= wb_fmc_250m_4ch_csr_monitor_led1_int;
-- LED2
  wb_fmc_250m_4ch_csr_monitor_led2_o <= wb_fmc_250m_4ch_csr_monitor_led2_int;
-- LED3
  wb_fmc_250m_4ch_csr_monitor_led3_o <= wb_fmc_250m_4ch_csr_monitor_led3_int;
-- Reserved
-- FMC_IDELAY_RST
  wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_o <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_idelay_rst_int;
-- FMC_FIFO_RST
  wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_o <= wb_fmc_250m_4ch_csr_fpga_ctrl_fmc_fifo_rst_int;
-- FMC_IDELAY0_RDY
-- FMC_IDELAY1_RDY
-- FMC_IDELAY2_RDY
-- FMC_IDELAY3_RDY
-- Reserved
-- UPDATE
  wb_fmc_250m_4ch_csr_idelay0_cal_update_o <= wb_fmc_250m_4ch_csr_idelay0_cal_update_int;
-- LINE
  wb_fmc_250m_4ch_csr_idelay0_cal_line_o <= wb_fmc_250m_4ch_csr_idelay0_cal_line_int;
-- VAL
  wb_fmc_250m_4ch_csr_idelay0_cal_val_o <= wb_fmc_250m_4ch_csr_idelay0_cal_val_int;
-- VAL_READ
-- Reserved
-- UPDATE
  wb_fmc_250m_4ch_csr_idelay1_cal_update_o <= wb_fmc_250m_4ch_csr_idelay1_cal_update_int;
-- LINE
  wb_fmc_250m_4ch_csr_idelay1_cal_line_o <= wb_fmc_250m_4ch_csr_idelay1_cal_line_int;
-- VAL
  wb_fmc_250m_4ch_csr_idelay1_cal_val_o <= wb_fmc_250m_4ch_csr_idelay1_cal_val_int;
-- VAL_READ
-- Reserved
-- UPDATE
  wb_fmc_250m_4ch_csr_idelay2_cal_update_o <= wb_fmc_250m_4ch_csr_idelay2_cal_update_int;
-- LINE
  wb_fmc_250m_4ch_csr_idelay2_cal_line_o <= wb_fmc_250m_4ch_csr_idelay2_cal_line_int;
-- VAL
  wb_fmc_250m_4ch_csr_idelay2_cal_val_o <= wb_fmc_250m_4ch_csr_idelay2_cal_val_int;
-- VAL_READ
-- Reserved
-- UPDATE
  wb_fmc_250m_4ch_csr_idelay3_cal_update_o <= wb_fmc_250m_4ch_csr_idelay3_cal_update_int;
-- LINE
  wb_fmc_250m_4ch_csr_idelay3_cal_line_o <= wb_fmc_250m_4ch_csr_idelay3_cal_line_int;
-- VAL
  wb_fmc_250m_4ch_csr_idelay3_cal_val_o <= wb_fmc_250m_4ch_csr_idelay3_cal_val_int;
-- VAL_READ
-- Reserved
-- DATA0
-- DATA1
-- DATA2
-- DATA3
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
